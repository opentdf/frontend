env:
  CONTAINER_ARCHS: linux/amd64,linux/arm64
on:
  push:
    branches: [main]
    tags: ["*"]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  release:
    types: [published]
jobs:
  app:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.version.outputs.VERSION }}
      CHART_VERSION: ${{ steps.chart-version.outputs.CHART_VERSION }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: grep --version
      - run: |
          app_version=$( jq -r .version package.json )
          semver_ere='^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$'
          semver_perl='^(?P<major>0|[1-9]\d*)\.(?P<minor>0|[1-9]\d*)\.(?P<patch>0|[1-9]\d*)$'
          # Work both on BSD/macos and GNU/Linux:
          if grep --help 2>&1 | grep perl; then
            if ! echo "$app_version" | grep -P "${semver_perl}"; then
              echo "## Invalid package.version: `${app_version}`" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          elif ! echo "$app_version" | grep -E "${semver_ere}"; then
            echo "## Invalid package.version: `${app_version}`" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "VERSION=$app_version" >> $GITHUB_OUTPUT
          echo "version=$app_version" >> $GITHUB_STEP_SUMMARY
        id: version
      - run: |
          chart_version=$(jq -r .version package.json)-sha$(git rev-parse --short HEAD)
          semver_full_ere='^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'
          semver_full_perl='^(?P<major>0|[1-9]\d*)\.(?P<minor>0|[1-9]\d*)\.(?P<patch>0|[1-9]\d*)(?:-(?P<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?P<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'
          if grep --help 2>&1 | grep perl; then
            if ! echo "$chart_version" | grep -P "${semver_full_perl}"; then
              echo "## Invalid package.version: `${app_version}`" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          elif ! echo "$chart_version" | grep -E "${semver_full_ere}"; then
            echo "## Invalid generated chart version number: `${chart_version}`" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "CHART_VERSION=$chart_version" >> $GITHUB_OUTPUT
          echo "chart_version=$chart_version" >> $GITHUB_STEP_SUMMARY
        id: chart-version
      - run: |
          [[ "${{ github.event.release.tag_version }}" == "${{ steps.version.outputs.VERSION }}" ]]
        if: ${{ github.event.release }}
        name: Validate release tag matches package version
      - run: npm ci
      - run: npm run test
    # - name: Install Playwright
    # run: npx playwright install --with-deps
    # - name: Run Playwright tests
    # run: xvfb-run npm run test:playwright
    # - name: Upload test results
    # if: always()
    # uses: actions/upload-artifact@v2
    # with:
    # name: playwright-test-results
    # path: test-results

  image:
    needs:
      - app
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    timeout-minutes: 90
    outputs:
      IMAGE_TAGS: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/opentdf/abacus
          tags: |
            type=ref,event=branch
            type=sha
            type=semver,pattern={{version}},value=${{ github.event.release.tag_version }},enabled=${{ !!github.event.release }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: publish
        uses: docker/build-push-action@v3
        with:
          build-args: |-
            NODE_VERSION=18
          platforms: ${{ env.CONTAINER_ARCHS }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'opentdf/frontend' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  chart:
    runs-on: ubuntu-latest
    needs:
      - image
      - app
    permissions:
      packages: write
      contents: read
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - uses: yokawasa/action-setup-kube-tools@v0.8.0
        with:
          setup-tools: helm
          helm: "3.10.2"
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: false
      - name: package
        run: |
          set -x
          echo "Packaging Helm chart abacus with chart version [${chart_ver}] and appVersion to [${app_ver}]"
          helm package abacus --app-version="${app_ver}" --version="${chart_ver}"
          echo *.tgz
        working-directory: charts
        env:
          app_ver: ${{ needs.app.outputs.VERSION }}
          chart_ver: ${{ github.event.release.tag_version || needs.app.outputs.CHART_VERSION }}
      - name: push
        run: |
          helm push *.tgz oci://ghcr.io/${{ github.repository_owner }}/charts
          echo "## Published Helm chart abacus with chart version [${chart_ver}] and appVersion to [${app_ver}]" >> $GITHUB_STEP_SUMMARY
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        working-directory: charts

  dispatch:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger opentdf/tests
        run: >-
          curl -X POST \
               -u "${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/opentdf/tests/dispatches \
               --data '{"event_type":"xtest"}'

  ci:
    needs: chart
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - run: exit 1
        if: ${{ needs.image.result == 'failure' }}
